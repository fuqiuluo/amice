name: Linux/macOS Build For Android NDK

on:
  push:
    branches: [ master ]
    paths:
      - '**/*.rs'
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '**/build.rs'
      - 'rust-toolchain*'
      - '.github/workflows/build-android-ndk.yml'
  pull_request:
    branches: [ master ]
    paths:
      - '**/*.rs'
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '**/build.rs'
      - 'rust-toolchain*'
      - '.github/workflows/build-android-ndk.yml'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: "LLVM/OPT ${{ matrix.llvm-version[0] }} ${{ matrix.os }} For Android NDK ${{ matrix.llvm-version[3] }}"
    strategy:
      fail-fast: false
      matrix:
        llvm-version:
          - ["14", "14-0", "140", "r25c", "r450784d1"]
          - ["18", "18-1", "181", "r27d", "r522817d"]
          - ["21", "21-1", "211", "r29", "r563880c"]
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      BUILD_OUTPUT_PATH: target/release
    
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Cache Rust Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-llvm${{ matrix.llvm-version[0] }}-${{ hashFiles('**/Cargo.lock') }}-android-ndk-${{ matrix.llvm-version[3] }}
          restore-keys: ${{ runner.os }}-cargo-llvm${{ matrix.llvm-version[0] }}-${{ hashFiles('**/Cargo.lock') }}-android-ndk-${{ matrix.llvm-version[3] }}

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: '1.89.0'

      - name: Install Android NDK Clang
        id: ndk-clang
        uses: Ylarod/setup-ndk-clang@v1
        with:
          ndk-version: ${{ matrix.llvm-version[3] }}

      - name: Install LLVM and Clang
        run: |
          set -euxo pipefail

          env_name="LLVM_SYS_${{ matrix.llvm-version[2] }}_PREFIX"
          echo "${env_name}=${{ steps.ndk-clang.outputs.clang-path }}" >> "$GITHUB_ENV"
          echo "${{ steps.ndk-clang.outputs.clang-path }}" >> "$GITHUB_PATH"
          echo "LLVM_HOME=${{ steps.ndk-clang.outputs.clang-path }}" >> "$GITHUB_ENV"

          if [ "${RUNNER_OS}" = "Linux" ]; then
            HOST_DIR="linux-x86"
            LIB_EXT="so"
          else
            # macOS runners can be x86_64 (macos-13) or arm64 (macos-14)
            HOST_DIR="darwin-x86"
            LIB_EXT="dylib"
          fi

          # Prefer lib64 if present, otherwise use lib
          if [ -d "$LLVM_HOME/lib64" ]; then
            LIBDIR="$LLVM_HOME/lib64"
          else
            LIBDIR="$LLVM_HOME/lib"
          fi
          echo "LLVM_LIBDIR=${LIBDIR}" >> "$GITHUB_ENV"

          # Compiler env
          echo "CC=$LLVM_HOME/bin/clang" >> "$GITHUB_ENV"
          echo "CXX=$LLVM_HOME/bin/clang++" >> "$GITHUB_ENV"

          # OS-specific library search env to avoid DYLD conflicts on macOS
          if [ "${RUNNER_OS}" = "Linux" ]; then
            echo "LD_LIBRARY_PATH=${LIBDIR}" >> "$GITHUB_ENV"
            echo "CXXFLAGS=-stdlib=libc++ -I$LLVM_HOME/include/c++/v1" >> "$GITHUB_ENV"
            echo "LDFLAGS=-stdlib=libc++ -L${LIBDIR}" >> "$GITHUB_ENV"
          else
            # Do NOT export DYLD_LIBRARY_PATH to avoid overriding system libc++/c++abi
            # Inject rpath for produced artifacts to locate libLLVM at runtime
            echo "RUSTFLAGS=-C link-args=-Wl,-rpath,${LIBDIR}" >> "$GITHUB_ENV"
            # Use macOS SDK with NDK clang so standard headers are found
            SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
            echo "SDKROOT=${SDKROOT}" >> "$GITHUB_ENV"
            echo "CFLAGS=-isysroot ${SDKROOT}" >> "$GITHUB_ENV"
            echo "CXXFLAGS=-isysroot ${SDKROOT} -stdlib=libc++ -I$LLVM_HOME/include/c++/v1" >> "$GITHUB_ENV"
            # Baseline deployment target
            echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> "$GITHUB_ENV"
          fi

          # Discover actual libLLVM filename and create a generic symlink under ${LIBDIR}
          if [ "${LIB_EXT}" = "so" ]; then
            if [ ! -e "${LIBDIR}/libLLVM.so" ]; then
              ls -al "${LIBDIR}" || true
              CANDIDATE=$( (ls "${LIBDIR}"/libLLVM*.so* 2>/dev/null || true) | head -n 1 || true)
              if [ -n "$CANDIDATE" ]; then
                ln -s "$CANDIDATE" "${LIBDIR}/libLLVM.so" 2>/dev/null || true
              fi
            fi
          else
            if [ ! -e "${LIBDIR}/libLLVM.dylib" ]; then
              ls -al "${LIBDIR}" || true
              CANDIDATE=$( (ls "${LIBDIR}"/libLLVM*.dylib* 2>/dev/null || true) | head -n 1 || true)
              if [ -n "$CANDIDATE" ]; then
                ln -s "$CANDIDATE" "${LIBDIR}/libLLVM.dylib" || true
              fi
            fi
          fi

      - name: Build libamice (Release)
        run: |
          set -euxo pipefail
          cargo build --release --no-default-features --features llvm${{ matrix.llvm-version[1] }},android-ndk
          
          # Determine extension by OS
          if [ "${RUNNER_OS}" = "macOS" ]; then EXT="dylib"; else EXT="so"; fi

          # Verify the built library exists
          if [ ! -f "${{ env.BUILD_OUTPUT_PATH }}/libamice.${EXT}" ]; then
            echo "Error: libamice.${EXT} not found in expected location"
            ls -la "${{ env.BUILD_OUTPUT_PATH }}/"
            exit 1
          fi

          # Show library info
          file "${{ env.BUILD_OUTPUT_PATH }}/libamice.${EXT}"
          if [ "${RUNNER_OS}" = "macOS" ]; then
            otool -L "${{ env.BUILD_OUTPUT_PATH }}/libamice.${EXT}" || true
          else
            ldd "${{ env.BUILD_OUTPUT_PATH }}/libamice.${EXT}" || true
          fi

      - name: Upload Build Artifact (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: libamice-llvm${{ matrix.llvm-version[0] }}-linux-x64-android-ndk
          path: ${{ env.BUILD_OUTPUT_PATH }}/libamice.so
          retention-days: 30
          if-no-files-found: error

      - name: Upload Build Artifact (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: libamice-llvm${{ matrix.llvm-version[0] }}-macos-x64-android-ndk
          path: ${{ env.BUILD_OUTPUT_PATH }}/libamice.dylib
          retention-days: 30
          if-no-files-found: error
